      r[,i]= findGroup(x[,i],centers)
    }
    print(r)
    # Parte dois do algoritmo: Atualizacao de centros

    # Sera que nosso algortimo convergiu?
    # Guarde-se centros atuais para posterior comparacao
    oldCenters = centers
    # para cada centro calcula numero de pontos no grupo
    pointsInGroup <- array(data=0,dim=c(3))
    # para cada centro calcula soma dos valores dos pontos no grupo
    sumInGroup <-array(data=0,dim=c(2,3))

    #Calculo de novo centro
    for (k in 1:3){
      for (i in 1:7){
        pointsInGroup[k]=pointsInGroup[k]+(r[k,i])
        sumInGroup[,k]=sumInGroup[,k]+(r[k,i])*x[,i]
      }
      if(pointsInGroup[k]>0){
        centers[,k]=sumInGroup[,k]/pointsInGroup[k]
      }
    }

    yy = x[1,which(r[3,]==1)];
    xx = x[2,which(r[3,]==1)];
    print (yy);
    print (xx)
    jpeg(paste(count,'TestePoints.jpg'))
    plot(yy,xx, type = "p", pch = 25,col = "blue")
    dev.off()
    
    jpeg('FInalPoints.jpg',width = 480, height = 480)
    plot(x[1,], x[2,], type = "p", pch = 25,col = "white")
    points(x[1,which(r[1,]==1)], x[2,which(r[1,]==1)], type = "p", pch = 25,col = "blue")
    points(x[1,which(r[2,]==1)], x[2,which(r[2,]==1)], type = "p", pch = 1,col = "black")
    points(x[1,which(r[3,]==1)], x[2,which(r[3,]==1)], type = "p", pch = 5,col = "red")
    points(centers[1,],centers[2,],type = "p", pch = 9,col = "purple")
    dev.off()

    
    #Fim da convergencia?
    if(sum(oldCenters-centers)==0){
      print ("ACHEI OS CENTROS")
      print(count)
      break 
    }
    else if(count>100){
      break
    }
    count <- count + 1
  }
  return (centers)
}
data <- array( c( 0,10,1,10,11,0,1.5,0,2,0,2,-1,1,0),dim = c(2,7))
centers <-array(dim=c(2,3))
centers[,1] <- data[,1]  # Numero 0
centers[,2] <- data[,2] # Numero 1
centers[,3] <- data[,3] # Numero 2
jpeg('InitialPoints.jpg')
plot(data[1,],data[2,],type = "p", pch = 25,col = "blue")
points(centers[1,],centers[2,],type = "p", pch = 9,col = "red")
dev.off()
print(data)
centers <- myKmean(data,centers)













myKmean <- function(x,centers){
  count=0
  while(1){
    # Definition of groups
    # Cria um vetor r para cada ponto
    # r[k,i] = 1 se i pertence a k, 0 caso contrario
    r <- array(dim=c(3,7))
    for (i in 1:7){
      r[,i]= findGroup(x[,i],centers)
    }
    print(r)
    # Parte dois do algoritmo: Atualizacao de centros

    # Sera que nosso algortimo convergiu?
    # Guarde-se centros atuais para posterior comparacao
    oldCenters = centers
    # para cada centro calcula numero de pontos no grupo
    pointsInGroup <- array(data=0,dim=c(3))
    # para cada centro calcula soma dos valores dos pontos no grupo
    sumInGroup <-array(data=0,dim=c(2,3))

    #Calculo de novo centro
    for (k in 1:3){
      for (i in 1:7){
        pointsInGroup[k]=pointsInGroup[k]+(r[k,i])
        sumInGroup[,k]=sumInGroup[,k]+(r[k,i])*x[,i]
      }
      if(pointsInGroup[k]>0){
        centers[,k]=sumInGroup[,k]/pointsInGroup[k]
      }
    }

    yy = x[1,which(r[3,]==1)];
    xx = x[2,which(r[3,]==1)];
    print (yy);
    print (xx)
    jpeg(paste(count,'TestePoints.jpg'))
    plot(yy,xx, type = "p", pch = 25,col = "blue")
    dev.off()
    
    jpeg('FInalPoints.jpg',width = 480, height = 480)
    plot(x[1,], x[2,], type = "p", pch = 25,col = "white")
    points(x[1,which(r[1,]==1)], x[2,which(r[1,]==1)], type = "p", pch = 25,col = "blue")
    points(x[1,which(r[2,]==1)], x[2,which(r[2,]==1)], type = "p", pch = 1,col = "black")
    points(x[1,which(r[3,]==1)], x[2,which(r[3,]==1)], type = "p", pch = 5,col = "red")
    points(centers[1,],centers[2,],type = "p", pch = 9,col = "purple")
    dev.off()

    
    #Fim da convergencia?
    if(sum(oldCenters-centers)==0){
      print ("ACHEI OS CENTROS")
      print(count)
      break 
    }
    else if(count>100){
      break
    }
    count <- count + 1
  }
  return (centers)
}
myKmean <- function(x,centers){
  count=0
  while(1){
    # Definition of groups
    # Cria um vetor r para cada ponto
    # r[k,i] = 1 se i pertence a k, 0 caso contrario
    r <- array(dim=c(3,7))
    for (i in 1:7){
      r[,i]= findGroup(x[,i],centers)
    }
    print(r)
    # Parte dois do algoritmo: Atualizacao de centros

    # Sera que nosso algortimo convergiu?
    # Guarde-se centros atuais para posterior comparacao
    oldCenters = centers
    # para cada centro calcula numero de pontos no grupo
    pointsInGroup <- array(data=0,dim=c(3))
    # para cada centro calcula soma dos valores dos pontos no grupo
    sumInGroup <-array(data=0,dim=c(2,3))

    #Calculo de novo centro
    for (k in 1:3){
      for (i in 1:7){
        pointsInGroup[k]=pointsInGroup[k]+(r[k,i])
        sumInGroup[,k]=sumInGroup[,k]+(r[k,i])*x[,i]
      }
      if(pointsInGroup[k]>0){
        centers[,k]=sumInGroup[,k]/pointsInGroup[k]
      }
    }

    yy = x[1,which(r[3,]==1)];
    xx = x[2,which(r[3,]==1)];
    print (yy);
    print (xx)
    jpeg(paste(count,'TestePoints.jpg'))
    plot(yy,xx, type = "p", pch = 25,col = "blue")
    dev.off()
    
    jpeg(paste(count,'Points.jpg'))
    plot(x[1,], x[2,], type = "p", pch = 25,col = "white")
    points(x[1,which(r[1,]==1)], x[2,which(r[1,]==1)], type = "p", pch = 25,col = "blue")
    points(x[1,which(r[2,]==1)], x[2,which(r[2,]==1)], type = "p", pch = 1,col = "black")
    points(x[1,which(r[3,]==1)], x[2,which(r[3,]==1)], type = "p", pch = 5,col = "red")
    points(centers[1,],centers[2,],type = "p", pch = 9,col = "purple")
    dev.off()

    
    #Fim da convergencia?
    if(sum(oldCenters-centers)==0){
      print ("ACHEI OS CENTROS")
      print(count)
      break 
    }
    else if(count>100){
      break
    }
    count <- count + 1
  }
  return (centers)
}

data <- array( c( 0,10,1,10,11,0,1.5,0,2,0,2,-1,1,0),dim = c(2,7))
centers <-array(dim=c(2,3))
centers[,1] <- data[,1]  # Numero 0
centers[,2] <- data[,2] # Numero 1
centers[,3] <- data[,3] # Numero 2
jpeg('InitialPoints.jpg')
plot(data[1,],data[2,],type = "p", pch = 25,col = "blue")
points(centers[1,],centers[2,],type = "p", pch = 9,col = "red")
dev.off()
print(data)
centers <- myKmean(data,centers)


;
;



;;
;
;
;
;
;

qui
q()


g
capabilities
capabilities()
library("RSvgDevice")
install.packages("RSvgDevice")
library("RSvgDevice")
warnings()
ncol(A)
nrow(A)
nrow(A)
ncol(A)
install.packages(vegetariam)
install.packages(vegetarian)
install.packages(som)
km$tot.withinss
HT
?kmeans
km$betweenss
?kmeans
km$totss
km$tot.withinss
warnings
warnings()
HT
CH
SS
?silhouette
install.package("cluster")
install.packages("cluster")
library("cluster")
?silhouette
km
summary(silhouette(km))
summary(silhouette(km$cluster),dist(normA))
summary(silhouette(km$cluster,dist(normA))
)
summary(silhouette(km$cluster,dist(normA)$avg.width
> summary(silhouette(km$cluster,dist(normA)))$avg.width
> summary(silhouette(km$cluster,dist(normA)$avg.width
> summary(silhouette(km$cluster,dist(normA)))$avg.width

summary(silhouette(km$cluster,dist(normA)))$avg.width
?kmeans
SIL 
SIL
SIL
plot(SI)
plot(SIL)
HT
CH
WSSE
plot(SIL)
SIL
HT
print(SIL, type="latex")
print(SIL, type="latex", file="", append=FALSE, floating=TRUE, floating.environment="table", table.placement = "ht", caption.placement="bottom", latex.environments=c("center"),tabular.environment = "tabular", size=NULL,hline.after=c(-1,0,nrow(x)), NA.string = "", include.rownames=TRUE,include.colnames=TRUE,only.contents=FALSE,add.to.row=NULL, sanitize.text.function=NULL)
print(SIL, type="latex", file="", append=FALSE, floating=TRUE, floating.environment="table", table.placement = "ht", caption.placement="bottom", latex.environments=c("center"),tabular.environment = "tabular", size=NULL,hline.after=c(-1,0,nrow(SIL)), NA.string = "", include.rownames=TRUE,include.colnames=TRUE,only.contents=FALSE,add.to.row=NULL, sanitize.text.function=NULL)
print(SIL, type="latex", file="teste.tex", append=FALSE, floating=TRUE, floating.environment="table", table.placement = "ht", caption.placement="bottom", latex.environments=c("center"),tabular.environment = "tabular", size=NULL,hline.after=c(-1,0,nrow(SIL)), NA.string = "", include.rownames=TRUE,include.colnames=TRUE,only.contents=FALSE,add.to.row=NULL, sanitize.text.function=NULL)
install.packages("xtable")
library(xtable)
obj <- xtable(SIL)
SES2
SSE2
WSSE2
nrow(normA)
nrow(A) 
nrow(hist.A) 
nrow(sum.A) 
which( sum.A > 1000 | sum.A < 10 )
count(which( sum.A > 1000 | sum.A < 10 ))
size(which( sum.A > 1000 | sum.A < 10 ))
dim(which( sum.A > 1000 | sum.A < 10 ))
length(which( sum.A > 1000 | sum.A < 10 ))
length(which( sum.A > 1000 | sum.A < 5 ))
length(which( sum.A > 1000 | sum.A < 100 ))
length(which( sum.A > 1000 | sum.A < 10 ))
length(which( sum.A > 1000 | sum.A < 20 ))
length(which( sum.A > 1000 | sum.A < 10 ))
length(which( sum.A > 800 | sum.A < 10 ))
length(which( sum.A > 500 | sum.A < 10 ))
length(which( sum.A > 300 | sum.A < 10 ))
length(which( sum.A > 200 | sum.A < 10 ))
length(which( sum.A > 100 | sum.A < 10 ))
length(which( sum.A > 50 | sum.A < 10 ))
length(which( sum.A > 40 | sum.A < 10 ))
length(which( sum.A > 30 | sum.A < 10 ))
length(which( sum.A > 20 | sum.A < 10 ))
length(which( sum.A > 20 | sum.A < 3 ))
length(which( sum.A > 700 | sum.A < 3 ))
length(which( sum.A > 700 | sum.A < 4 ))
length(which( sum.A > 700 | sum.A < 5 ))
length(which( sum.A > 700 | sum.A < 5 ))
nrow(A)
nrow(sumA)
nrow(sum.A)
nrow(hist.A)
nrow(hist.A)
length(hist.A)
length(which( sum.A > 700 | sum.A < 5 ))
length(which( sum.A > 1000 | sum.A < 5 ))
length(which( sum.A > 2000 | sum.A < 5 ))
length(which( sum.A > 1500 | sum.A < 5 ))
nrow(normA)
length(normA)
DOC <- rep(0,9)
DOC <- matrix(rep(0,9),3)
DOC
DOC[,1] <- 
1
DOC
DOC[,3] <- 1 
DOC[2,3] <- 0 
DOC
DOC[2,2] <- 1 
DOC
log(nrow(DOC)/sum(DOC[,1]))
log(nrow(DOC)/sum(DOC[,2]))
log(nrow(DOC)/sum(DOC[,3]))
sum.DOC <- apply(DOC, 2, FUN = sum)
sum.DOC
wA
sum.wA[sum.wA <0]
sum.wA[sum.wA >0]
idf
idf[1,]
idf[,1]
idf[1]
idf[2]
idf[4]
idf[5]
idf[7]
idf[1]
sum.wA[1]
normA[1]
normA[2]
normA[1,]
normA[,1]
sum(A[1,])
A[1,]
A[,1]
sum(A[,1])
sum(A[,1])
sum(A[1,])
sumA[1]
sum.A[1]
sum.A[2]
sum.A[3]
sum.A[4]
sum.A[5]
sum.A[6]
sum.A[7]
sum.A[8]
sum.A[9]
A[1,1]
A[1,]
A[,1]
histA[1]
hist.A[1]
hist.A[2]
hist.A[3]
hist.A[4]
hist.A[4,]
hist.A[1,]
-c(which( sum.A > 1000 | sum.A < 5 )
-c(which( sum.A > 1000 | sum.A < 5 )
) 
)
sum.A
c(which( sum.A > 1000 | sum.A < 5 )
)
nrow(sum.A)
sum.A[20000,]
sum.A[19999,]
sum.A[,1]
sum.A[,2]
sum.A[19999,]
sum.A[20000,]
nrow(hist.A)
hist.A[20000,]
hist.A[19999,]
hist.A[19998,]
hist.A[19997,]
hist.A[19999,]
nrow(hist.A)
hist.A[19999]
hist.A[19998]
hist.A[19997]
hist.A[100]
length(hist.A)
hist.A[9291]
hist.A[9290]
hist.A[7]
A[],1
A[,1]
sum.A[,1]
nrow(A)
nrow(sum.A)
ncolumnw(sum.A)
ncolumn(sum.A)
ncol(sum.A)
ncol(A)
A[1,]
sum(A[1,])
sum(A[,1])
A[,1]
sum(A[,1])
c(which( sum.A > 1000 | sum.A < 5 )
)
A[1,]
A[,1]
sum(A[,1])
sum(A[,2])
sum(A[,3])
newA[,1]
sum(newA[,1])
sum(A[,1])
sum(A[,2])
sum(newA[,2])
clean.A[1,]
lenght(sum.A)
length(sum.A)
nrow(sum.A)
nrow(A)
ncol(A)
normA[,1]
sum(normA[,1])
sum(normA[,2])
sum(normA[,1])
sum(normA[,3])
sum(normA[,4])
sum(normA[,5])
sum(normA[1,])
sum(normA[2,])
sum(normA[3,])
sum(normA[4,])
nrow(A)
nrow(clean.A)
ncol(clean.A)
ncol(A)
A[,1]
A[1,1]
A[1,]
A[,"zyklon"]
sum(A[,"zyklon"])
clean.A[,"zyklon"]
clean.A[,"mot"]
sum(clean.A[,"mot"])
sum(A[,"mot"])
sum(normA[,1])
sum(normA[1,])
sum(normA[2,])
sum(normA[,2])
size(normA)
nrow(normA)
ncol(normA)
sum(normA[1,])
sum(normA[3,])
sum(normA[10,])
sum(normA[9,])
for (i in 2:Nbk) {
  km <- kmeans(normA,i,nstart=1,iter.max=100)
  SIL[i] <- summary(silhouette(km$cluster,dist(normA)))$avg.width
  WSSE[i] <- km$tot.withinss
  BSSE[i] <- km$betweenss
}
?tm <- map
?tm_map
corpus <- tm_map(corpus, removeSignature)
