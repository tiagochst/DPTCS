
----------
-- Data --
----------

--  POS_Internal_Type is the internal type of the POS shared variable

data POS_Internal_Type
properties
  Data_Model::Data_Representation => integer;
end POS_Internal_Type;

--  POS is a shared variable between the threads GNC and TMTC. Its
--  internal type is defined in POS.Impl. Therefore, POS.Impl is the
--  data component types that should be used in the remaining of the
--  model.

data POS
features
  Update : subprogram Update;
  Read   : subprogram Read;
end POS;

data implementation POS.Impl
subcomponents
  Field : data POS_Internal_Type;
properties
  Data_Model::Data_Representation => Struct;
  Concurrency_Control_Protocol => Priority_Ceiling;
end POS.Impl;

-----------------
-- Subprograms --
-----------------

subprogram Update
features
  this : requires data access POS.Impl;
properties
  source_language => Ada95;
  source_name     => "Probe.Update";
end Update;
--  This subprogram updates the internal value of POS

subprogram Read
features
  this       : requires data access POS.Impl;
properties
  source_language => Ada95;
  source_name     => "Probe.Read";
end Read;
--  This subprogram displays the internal value of POS

subprogram GNC_Job
properties
  source_language => Ada95;
  source_name     => "Probe.GNC_Job";
end GNC_Job;
--  This subprogram consumes the CPU during a given amount of time

subprogram TMTC_Job
properties
  source_language => Ada95;
  source_name     => "Probe.TMTC_Job";
end TMTC_Job;
--  This subprogram consumes the CPU during a given amount of time

--  The two subprogram below are used for debug purposes

subprogram GNC_Identity
properties
  source_language => Ada95;
  source_name     => "Probe.GNC_Identity";
end GNC_Identity;

subprogram TMTC_Identity
properties
  source_language => Ada95;
  source_name     => "Probe.TMTC_Identity";
end TMTC_Identity;

--------------------------
--  Subprogram Wrappers --
--------------------------

subprogram GNC_Thread_Wrapper
features
  GNC_POS : requires data access POS.Impl;
end GNC_Thread_Wrapper;

subprogram implementation GNC_Thread_Wrapper.Impl
calls {
  --  The behaviour of the GNC thread should be the following:
  --   - Displays a "welcome" message
  --   - Update the shared variable
  --   - Do some computations
  --   - Read the shared variable
  --   - [For question 3 only: send the value of the shared variable 
  --      to the ground station].
  --   - Display a "goodbye" message
};
connections
 
  --  TO BE COMPLETED

end GNC_Thread_Wrapper.Impl;

subprogram TMTC_Thread_Wrapper
features
  TMTC_POS : requires data access POS.Impl;
end TMTC_Thread_Wrapper;

subprogram implementation TMTC_Thread_Wrapper.Impl
calls {
  --  The behaviour of the TMTC thread should be the following:
  --   - Displays a "welcome" message
  --   - Do some computations
  --   - Update the shared variable
  --   - Display a "goodbye" message
};
connections

  --  TO BE COMPLETED

end TMTC_Thread_Wrapper.Impl;

-------------
-- Threads --
-------------

thread GNC_Thread
features
  GNC_POS : requires data access POS.Impl;
end GNC_Thread;

thread implementation GNC_Thread.Impl
calls {
  GNC_Thread_Wrapper : subprogram GNC_Thread_Wrapper.Impl;
};
connections
  Cnx_GNC_1 : data access GNC_POS -> GNC_Thread_Wrapper.GNC_POS;
properties
  Dispatch_Protocol                  => --  TBD
  Period                             => --  TBD
  Compute_Execution_time             => --  TBD
  Deadline                           => --  TBD
end GNC_thread.Impl;

thread TMTC_Thread
features
  TMTC_POS : requires data access POS.Impl;
end TMTC_Thread;

thread implementation TMTC_Thread.Impl
calls {
  TMTC_Thread_Wrapper : subprogram TMTC_Thread_Wrapper.Impl;
};
connections
  Cnx_TMTC_1 : data access TMTC_POS -> TMTC_Thread_Wrapper.TMTC_POS;
properties
  Dispatch_Protocol                  => --  TBD
  Period                             => --  TBD
  Compute_Execution_time             => --  TBD
  Deadline                           => --  TBD
end TMTC_Thread.Impl;

---------------
-- Processes --
---------------

process Probe_Proc
end Probe_Proc;

process implementation Probe_Proc.Impl
subcomponents
  GNC_Th   : thread GNC_Thread.Impl;
  TMTC_Th  : thread TMTC_Thread.Impl;
  POS_Data : data POS.Impl;
connections
  Cnx_Proc_2 : data access POS_Data -> GNC_Th.GNC_POS;
  Cnx_Proc_3 : data access POS_Data -> TMTC_Th.TMTC_POS;
end Probe_Proc.Impl;

---------------
-- Processor --
---------------

processor the_processor
   --  TBD: Add a required bus access feature to the process for the
   --  distributed applicaion case.
properties
  Deployment::location           => "127.0.0.1";
  Deployment::Execution_Platform => Native;

  Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
end the_processor;

------------
-- System --
------------

system probe
end probe;

system implementation probe.sample_1
subcomponents 
  P1            : processor the_processor;
  GNC_TMTC_POS  : process Probe_Proc.Impl;

  --  TBD: For the distributed case, declare the ground control
  --  process and the communication bus.

  --  TBD: For the distributed case, connect the two processes

properties
  Actual_Processor_Binding => reference P1 applies to GNC_TMTC_POS;
end probe.sample_1;
